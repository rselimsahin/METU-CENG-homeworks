#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
# Ramazan Selim Sahin
# 2171999
#
# My code basically unrolls the src by 8 in each loop and when
# there is less than 8 numbers left it calculates the remaining
# one by one
#
# I did unrolling by 8 to improve the performance by lowering the 
# costly conditional checks of loops for every number in src
#
# I tried unrolling by different lenghts like 4-6-8-10 but I found
# unrolling by 8 the most efficient 
#
# When unrolling and remainder operations I always read two values
# from src to avoid nops because extra reading is not a problem 
# and I write that value to dest right after reading it(mrmovq and 
# rmmovq)
#
# I changed irmovq-andq instructions with iaddq instruchtion that I
# implemented in pipe-full.hcl because it is a lot faster.
#
# I removed andq operations after additions because iaddq already 
# sets the conditions flags itself.
#
# I implemented conditional jumps between remainders with jge  
# because program goes to lower remainders less times (e1 the most 
# and e7 the least) 
#
# I tried handling the remainder part as 4-2-1 blocks but it was 
# inefficient because there was lots of checks for small remainders
#
# Please read comments in code section I added comments in the code
# section to show how my code works
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;

C:	iaddq $-8, %rdx 	# len-=8
	jl E1		# if so, goto Done:

L1: mrmovq (%rdi), %r10	# read val0 from src...
	mrmovq 8(%rdi), %r11	# read val1 from src...
	rmmovq %r10, (%rsi)	# ...and store val0 to dst
	andq %r10, %r10		# val <= 0?
	jle L2		# if so, goto L2:
	iaddq $1, %rax # count++

L2:	rmmovq %r11, 8(%rsi)	# ...and store val1 to dst
	andq %r11, %r11		# val <= 0?
	jle L3		# if so, goto L3:
	iaddq $1, %rax # count++

L3: mrmovq 16(%rdi), %r10	# read val2 from src...
	mrmovq 24(%rdi), %r11	# read val3 from src...
	rmmovq %r10, 16(%rsi)	# ...and store val2 to dst
	andq %r10, %r10		# val <= 0?
	jle L4		# if so, goto L4:
	iaddq $1, %rax # count++

L4: rmmovq %r11, 24(%rsi)	# ...and store val3 to dst
	andq %r11, %r11		# val <= 0?
	jle L5		# if so, goto L5:
	iaddq $1, %rax # count++

L5: mrmovq 32(%rdi), %r10	# read val4 from src...
	mrmovq 40(%rdi), %r11	# read val5 from src...
	rmmovq %r10, 32(%rsi)	# ...and store val4 to dst
	andq %r10, %r10		# val <= 0?
	jle L6		# if so, goto L6:
	iaddq $1, %rax # count++

L6: rmmovq %r11, 40(%rsi)	# ...and store val5 to dst
	andq %r11, %r11		# val <= 0?
	jle L7		# if so, goto L7:
	iaddq $1, %rax # count++

L7: mrmovq 48(%rdi), %r10	# read val6 from src...
	mrmovq 56(%rdi), %r11	# read val7 from src...
	rmmovq %r10, 48(%rsi)	# ...and store val6 to dst
	andq %r10, %r10		# val <= 0?
	jle L8		# if so, goto L8:
	iaddq $1, %rax # count++

L8: rmmovq %r11, 56(%rsi)	# ...and store val7 to dst
	andq %r11, %r11		# val <= 0?
	jle NL		# if so, goto NL:
	iaddq $1, %rax # count++

NL: iaddq $64, %rdi		# move src by 8
	iaddq $64, %rsi		# move dest by 8
	iaddq $-8, %rdx		# len-=8
	jge L1
	
E1:	
	iaddq $7, %rdx		# len-=1
	jge E11 	# if len >=0 continue
	ret

E11:	mrmovq	(%rdi),%r10		# read val0 from src
	mrmovq	8(%rdi),%r11		# read val1 from src
	rmmovq	%r10, (%rsi)		# write val0 to dest
	andq %r10, %r10		# val <= 0?
	jle E2		# if so, goto E2:
	iaddq $1, %rax # count++

E2:	iaddq $-1, %rdx		# len-=1
	jge E22 	# if len >=0 continue
	ret
E22:	rmmovq	%r11, 8(%rsi)	# write val1 to dest
	andq %r11, %r11		# val <= 0?
	jle E3		# if so, goto E3:
	iaddq $1, %rax # count++

E3:	
	iaddq $-1, %rdx		# len-=1
	jge E33 	# if len >=0 continue
	ret
E33:	mrmovq	16(%rdi),%r10	# read val2 from src
	mrmovq	24(%rdi),%r11		# read val3 from src
	rmmovq	%r10, 16(%rsi)		# write val2 to dest
	andq %r10, %r10		# val <= 0?
	jle E4		# if so, goto E4:
	iaddq $1, %rax # count++

E4:	iaddq $-1, %rdx		# len-=1
	jge E44 	# if len >=0 continue
	ret
E44:	rmmovq	%r11, 24(%rsi)	# write val3 to dest
	andq %r11, %r11 	# val <= 0?
	jle E5		# if so, goto E5:
	iaddq $1, %rax # count++

E5:	iaddq $-1, %rdx		# len-=1
	jge E55 	# if len >=0 continue
	ret
E55:	mrmovq	32(%rdi),%r10	# read val4 from src
	mrmovq	40(%rdi),%r11		# read val5 from src
	rmmovq	%r10, 32(%rsi)		# write val4 to dest
	andq %r10, %r10		# val <= 0?
	jle E6		# if so, goto E6:
	iaddq $1, %rax # count++

E6:	iaddq $-1, %rdx	# len-=1
	jg E66		# if len > 0 2 more
	je E77		# else if len == 0 1 more
	ret 		# else return
E66:mrmovq 48(%rdi), %r10		# read val6 from src
	rmmovq	%r11, 40(%rsi)		# write val5 to dest
	andq %r11, %r11		# val <= 0?
	jle E68		# if so, goto E68:
E67:rmmovq	%r10, 48(%rsi)		# read val6 from src
	andq %r10, %r10		# val <= 0?
	jle E671		# if so, goto E671:
	iaddq $2, %rax # count+=2
	ret
E671:iaddq $1, %rax		# count++
	ret
E68:rmmovq	%r10, 48(%rsi)		# write val6 to dest
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax # count++
	ret

E7:	iaddq $-1, %rdx		# len-=1
	je E77		# else if len == 0 1 more
	ret
E77:	rmmovq	%r11, 40(%rsi)		# write val5 to dest
	andq %r11, %r11		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax # count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
