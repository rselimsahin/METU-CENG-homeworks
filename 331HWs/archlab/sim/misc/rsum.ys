# Ramazan Selim Sahin
# 2171999
# Execution begins at address 0
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program

# Sample linked list
.align 8
ele1:
.quad 0x00a
.quad ele2
ele2:
.quad 0x0b0
.quad ele3
ele3:
.quad 0xc00
.quad 0

main:	irmovq ele1,%rdi
	call rsum_list		# rsum(array, 4)
	ret

/* $begin rsum-ys */
# long rsum(long *start, long count)
# start in %rdi, count in %rsi
rsum_list:
	xorq %rax,%rax		# Set return value to 0
	andq %rdi,%rdi		# Set condition codes
	je     return		# If count == 0, return 0
	pushq %rbx		# Save callee-saved register
	mrmovq (%rdi),%rbx	# Get *start
	mrmovq 8(%rdi),%rdi          # start++
	call rsum_list
	addq %rbx,%rax          # Add *start to sum
	popq %rbx		# Restore callee-saved register
return:
	ret
/* $end rsum-ys */

# The stack starts here and grows to lower addresses
	.pos 0x200
stack:
